plugins {
    id 'fabric-loom' version '0.10.64'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.nucleoid.xyz' }
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url = 'https://repo.incendo.org/content/repositories/snapshots'
    }
    maven {
        name = 'opencollab-release-repo'
        url = 'https://repo.opencollab.dev/maven-releases/'
    }
    maven {
        name = 'opencollab-snapshot-repo'
        url = 'https://repo.opencollab.dev/maven-snapshots/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Lib Mods
    modImplementation "com.github.MrNavaStar:SQLib:${project.sqlib_version}"
    modImplementation "com.github.ElectroBrine:NotifacationManager:${project.notification_version}"
    modImplementation "eu.pb4:hologram-api:${project.hologram_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    //Other Libs
    include(implementation("org.geysermc.floodgate:common:${project.floodgate_version}"))
    include(implementation("com.github.BlueMap-Minecraft:BlueMapAPI:${project.bluemap_version}"))
    include(implementation("io.javalin:javalin:${project.javalin_version}"))
    // include(implementation("com.fasterxml.jackson.core:jackson-core:${project.jackson_version}"))
    // include(implementation("com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}"))
    // include(implementation("com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}"))
    include(implementation("com.opencsv:opencsv:${project.opencsv_version}"))
    include(implementation("com.konghq:unirest-java:3.11.09"))
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}
